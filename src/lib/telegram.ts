const TELEGRAM_BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
const TELEGRAM_ADMIN_CHAT_ID = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID;

export async function sendTelegramMessage(text: string): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_ADMIN_CHAT_ID) {
    console.warn('Telegram credentials not configured');
    return false;
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_ADMIN_CHAT_ID,
          text,
          parse_mode: 'HTML',
        }),
      }
    );

    if (!response.ok) {
      throw new Error('Failed to send telegram message');
    }

    return true;
  } catch (error) {
    console.error('Error sending telegram message:', error);
    return false;
  }
}

// –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export async function sendTelegramForm(data: {
  name: string;
  email: string;
  phone: string;
  tariff: string;
  page: string;
}) {
  const message = `
üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!

üë§ –ò–º—è: ${data.name}
üìß Email: ${data.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üí∞ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: ${data.tariff}
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${data.page}

üåê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞ biveki.ru
`;

  return sendTelegramMessage(message);
}
