import { NextResponse } from 'next/server';
import { pool } from '@/lib/db';
import { sendTelegramMessage } from '@/lib/telegram';
import { sendBalanceUpdateEmail } from '@/lib/mail';
import crypto from 'crypto';

const YOOKASSA_SECRET_KEY = process.env.YOOKASSA_SECRET_KEY!;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç –ÆKassa
function checkSignature(body: string, signature: string | null): boolean {
  if (!signature) return false;

  const hmac = crypto.createHmac('sha1', YOOKASSA_SECRET_KEY);
  const expectedSignature = hmac.update(body).digest('hex');

  return signature === expectedSignature;
}

export async function POST(req: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    const body = await req.text();
    const data = JSON.parse(body);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const signature = req.headers.get('yookassa-signature');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if (!checkSignature(body, signature)) {
      console.error('Invalid signature from YooKassa');
      return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    if (data.event !== 'payment.succeeded') {
      return NextResponse.json({ message: 'Ignored non-success event' });
    }

    const { metadata, amount } = data.object;
    const userEmail = metadata.email;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const userResult = await pool.query(
      'SELECT id FROM users WHERE email = $1',
      [userEmail]
    );

    if (userResult.rows.length === 0) {
      console.error('User not found:', userEmail);
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    const userId = userResult.rows[0].id;
    const paymentAmount = parseFloat(amount.value);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await pool.query(
      `INSERT INTO cloud_balance (user_id, amount)
       VALUES ($1, $2)
       ON CONFLICT (user_id)
       DO UPDATE SET amount = cloud_balance.amount + $2`,
      [userId, paymentAmount]
    );

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    await pool.query(
      `INSERT INTO cloud_operations
       (user_id, type, amount, method, status)
       VALUES ($1, 'deposit', $2, 'online', 'completed')`,
      [userId, paymentAmount]
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const balanceResult = await pool.query(
      'SELECT amount FROM cloud_balance WHERE user_id = $1',
      [userId]
    );

    const newBalance = balanceResult.rows[0].amount;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await sendTelegramMessage(
      `üí∞ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userEmail}\nüíµ –°—É–º–º–∞: ${paymentAmount} ‚ÇΩ\nüí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} ‚ÇΩ`
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await sendBalanceUpdateEmail(userEmail, {
      amount: paymentAmount,
      newBalance,
      type: 'deposit',
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error processing YooKassa webhook:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
