import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { verifyAuthServer } from '@/lib/auth.server';
import { pool } from '@/lib/db';
import { sendTelegramMessage } from '@/lib/telegram';

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const user = await verifyAuthServer(token);

    if (!user || user.role !== 'admin') {
      return new NextResponse('Forbidden', { status: 403 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const serviceResult = await pool.query(
      'SELECT cs.*, u.email as user_email FROM cloud_services cs JOIN users u ON cs.user_id = u.id WHERE cs.id = $1',
      [parseInt(params.id)]
    );

    if (serviceResult.rows.length === 0) {
      return new NextResponse('Service not found', { status: 404 });
    }

    const service = serviceResult.rows[0];

    // –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É
    await pool.query('DELETE FROM cloud_services WHERE id = $1', [
      parseInt(params.id),
    ]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await sendTelegramMessage(
      `üóë –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞\n\n–£—Å–ª—É–≥–∞: ${service.name}\n–ö–ª–∏–µ–Ω—Ç: ${service.user_email}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price} ‚ÇΩ/–¥–µ–Ω—å`
    );

    return new NextResponse(null, { status: 204 });
  } catch (error) {
    console.error('[CLOUD_SERVICE_DELETE]', error);
    return new NextResponse('Internal Error', { status: 500 });
  }
}
