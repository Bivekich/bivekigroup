import { NextResponse } from 'next/server';
import { pool } from '@/lib/db';
import { cookies } from 'next/headers';
import { verifyAuthServer } from '@/lib/auth.server';
import { sendTelegramMessage } from '@/lib/telegram';
import { sendEmail } from '@/lib/mail';

export async function GET() {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const user = await verifyAuthServer(token);
    if (!user) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const query =
      user.role === 'admin'
        ? `SELECT cs.*, u.email as user_email
         FROM cloud_services cs
         JOIN users u ON cs.user_id = u.id
         ORDER BY cs.created_at DESC`
        : `SELECT * FROM cloud_services
         WHERE user_id = $1
         ORDER BY created_at DESC`;

    const result = await pool.query(
      query,
      user.role === 'admin' ? [] : [user.id]
    );

    return NextResponse.json({ services: result.rows });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function POST(req: Request) {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const user = await verifyAuthServer(token);
    if (!user || user.role !== 'admin') {
      return new NextResponse('Forbidden', { status: 403 });
    }

    const { name, type, description, price, userId } = await req.json();

    // –ü–æ–ª—É—á–∞–µ–º email –∫–ª–∏–µ–Ω—Ç–∞
    const clientResult = await pool.query(
      'SELECT email FROM users WHERE id = $1',
      [userId]
    );

    if (clientResult.rows.length === 0) {
      return new NextResponse('User not found', { status: 404 });
    }

    const clientEmail = clientResult.rows[0].email;

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥—É
    const serviceResult = await pool.query(
      `INSERT INTO cloud_services
       (name, type, description, price, user_id, status, created_at)
       VALUES ($1, $2, $3, $4, $5, 'active', NOW())
       RETURNING *`,
      [name, type, description, price, userId]
    );

    const service = serviceResult.rows[0];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
    await sendEmail({
      to: clientEmail,
      subject: 'BivekiCloud',
      text: `–î–ª—è –≤–∞—Å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —É—Å–ª—É–≥–∞: ${name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} ‚ÇΩ/–¥–µ–Ω—å`,
      html: `
        <h2>BivekiCloud!</h2>
        <p>–î–ª—è –≤–∞—Å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ–±–ª–∞—á–Ω–∞—è —É—Å–ª—É–≥–∞. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</p>
        <div style="background: #f5f5f5; padding: 20px; margin: 20px 0; border-radius: 5px;">
          <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${name}</p>
          <p><strong>–¢–∏–ø:</strong> ${type}</p>
          <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${description}</p>
          <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${price} ‚ÇΩ/–¥–µ–Ω—å</p>
        </div>
        <p>–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href="${process.env.NEXT_PUBLIC_APP_URL}/dashboard/cloud" style="color: #007bff;">–í–æ–π—Ç–∏</a></p>
        <p style="color: #666; font-size: 12px; margin-top: 30px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
      `,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É
    const message = `
üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ–±–ª–∞—á–Ω–∞—è —É—Å–ª—É–≥–∞
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${clientEmail}
üì¶ –£—Å–ª—É–≥–∞: ${name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} ‚ÇΩ/–¥–µ–Ω—å
    `;

    await sendTelegramMessage(message);

    return NextResponse.json(service);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function PATCH(req: Request) {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const user = await verifyAuthServer(token);
    if (!user || user.role !== 'admin') {
      return new NextResponse('Forbidden', { status: 403 });
    }

    const { id, status, ...data } = await req.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    const validStatuses = ['active', 'suspended', 'terminated'];
    const serviceStatus =
      status && validStatuses.includes(status) ? status : 'active';

    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥—É
    const serviceResult = await pool.query(
      `UPDATE cloud_services
       SET status = $1,
           name = COALESCE($2, name),
           description = COALESCE($3, description),
           price = COALESCE($4, price),
           updated_at = NOW()
       WHERE id = $5
       RETURNING *`,
      [serviceStatus, data.name, data.description, data.price, id]
    );

    const service = serviceResult.rows[0];

    // –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
    if (status === 'suspended') {
      // –ü–æ–ª—É—á–∞–µ–º email –∫–ª–∏–µ–Ω—Ç–∞
      const clientResult = await pool.query(
        'SELECT email FROM users WHERE id = $1',
        [service.user_id]
      );

      if (clientResult.rows.length > 0) {
        const clientEmail = clientResult.rows[0].email;

        await sendEmail({
          to: clientEmail,
          subject: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç BivekiGroup',
          text: `–£—Å–ª—É–≥–∞ ${service.name} –±—ã–ª–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞`,
          from: `"BivekiGroup" <${process.env.SMTP_USER}>`,
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #333;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Å–ª—É–≥–∏</h2>
              <p>–£–≤–µ–¥–æ–º–ª—è–µ–º –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ –æ–±–ª–∞—á–Ω–∞—è —É—Å–ª—É–≥–∞ –±—ã–ª–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</p>
              <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <p style="margin: 5px 0;"><strong>–£—Å–ª—É–≥–∞:</strong> ${service.name}</p>
                <p style="margin: 5px 0;"><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</p>
              </div>
              <p>–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —É—Å–ª—É–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ <a href="${process.env.NEXT_PUBLIC_APP_URL}/dashboard/cloud" style="color: #007bff;">–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>.</p>
              <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
              <p style="color: #666; font-size: 12px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
            </div>
          `,
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É
      const message = `
‚ö†Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±–ª–∞—á–Ω–∞—è —É—Å–ª—É–≥–∞
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${clientResult.rows[0]?.email}
üì¶ –£—Å–ª—É–≥–∞: ${service.name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price} ‚ÇΩ/–¥–µ–Ω—å
üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${service.balance} ‚ÇΩ
      `;

      await sendTelegramMessage(message);
    }

    return NextResponse.json(service);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
