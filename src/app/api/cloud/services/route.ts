import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { cookies } from 'next/headers';
import { verifyAuthServer } from '@/lib/auth.server';
import { sendTelegramMessage } from '@/lib/telegram';
import { sendEmail } from '@/lib/mail';

export async function GET() {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const user = await verifyAuthServer(token);
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let services;

    if (user.role === 'admin') {
      services = await prisma.cloudService.findMany({
        include: {
          user: {
            select: {
              email: true,
            },
          },
        },
        orderBy: {
          created_at: 'desc',
        },
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API
      services = services.map((service) => ({
        ...service,
        user_email: service.user.email,
        user: undefined,
      }));
    } else {
      services = await prisma.cloudService.findMany({
        where: {
          user_id: user.id,
        },
        orderBy: {
          created_at: 'desc',
        },
      });
    }

    return NextResponse.json({ services });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

export async function POST(req: Request) {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const user = await verifyAuthServer(token);
    if (!user || user.role !== 'admin') {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    const { name, type, description, price, userId } = await req.json();

    // –ü–æ–ª—É—á–∞–µ–º email –∫–ª–∏–µ–Ω—Ç–∞
    const client = await prisma.user.findUnique({
      where: { id: Number(userId) },
      select: { email: true },
    });

    if (!client) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    const clientEmail = client.email;

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥—É
    const service = await prisma.cloudService.create({
      data: {
        name,
        type,
        description,
        price,
        user_id: Number(userId),
        status: 'active',
      },
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const message = `
üÜï –ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
üë§ –ö–ª–∏–µ–Ω—Ç: ${clientEmail}
üì¶ –£—Å–ª—É–≥–∞: ${name}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} ‚ÇΩ/–¥–µ–Ω—å
    `;

    await sendTelegramMessage(message);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É –∫–ª–∏–µ–Ω—Ç—É
    try {
      await sendEmail({
        to: clientEmail,
        subject: '–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
        html: `
          <h2>–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —É—Å–ª—É–≥–∞</h2>
          <p>–ù–∞–∑–≤–∞–Ω–∏–µ: <strong>${name}</strong></p>
          <p>–¢–∏–ø: <strong>${type}</strong></p>
          <p>–û–ø–∏—Å–∞–Ω–∏–µ: <strong>${description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</strong></p>
          <p>–°—Ç–æ–∏–º–æ—Å—Ç—å: <strong>${price} ‚ÇΩ/–¥–µ–Ω—å</strong></p>
          <p>–°—Ç–∞—Ç—É—Å: <strong>–ê–∫—Ç–∏–≤–Ω–∞</strong></p>
          <p>–£—Å–ª—É–≥–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –±—É–¥–µ—Ç —Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href="${
            process.env.NEXT_PUBLIC_APP_URL
          }/dashboard/cloud">–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>.</p>
        `,
      });
    } catch (emailError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', emailError);
    }

    return NextResponse.json(service);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

export async function PATCH(req: Request) {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const user = await verifyAuthServer(token);
    if (!user || user.role !== 'admin') {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    const { id, status, ...data } = await req.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    const validStatuses = ['active', 'suspended', 'terminated'];
    const serviceStatus =
      status && validStatuses.includes(status) ? status : 'active';

    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥—É
    const service = await prisma.cloudService.update({
      where: { id: Number(id) },
      data: {
        status: serviceStatus,
        name: data.name,
        description: data.description,
        price: data.price,
      },
    });

    // –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
    if (serviceStatus === 'suspended') {
      // –ü–æ–ª—É—á–∞–µ–º email –∫–ª–∏–µ–Ω—Ç–∞
      const client = await prisma.user.findUnique({
        where: { id: service.user_id },
        select: { email: true },
      });

      if (client) {
        const clientEmail = client.email;

        await sendEmail({
          to: clientEmail,
          subject: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç BivekiGroup',
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #333;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Å–ª—É–≥–∏</h2>
              <p>–£–≤–µ–¥–æ–º–ª—è–µ–º –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ –æ–±–ª–∞—á–Ω–∞—è —É—Å–ª—É–≥–∞ –±—ã–ª–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</p>
              <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <p style="margin: 5px 0;"><strong>–£—Å–ª—É–≥–∞:</strong> ${service.name}</p>
                <p style="margin: 5px 0;"><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</p>
              </div>
              <p>–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —É—Å–ª—É–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ <a href="${process.env.NEXT_PUBLIC_APP_URL}/dashboard/cloud" style="color: #007bff;">–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>.</p>
              <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
              <p style="color: #666; font-size: 12px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
            </div>
          `,
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const balance = await prisma.cloudBalance.findUnique({
        where: { user_id: service.user_id },
        select: { amount: true },
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É
      const message = `
‚ö†Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±–ª–∞—á–Ω–∞—è —É—Å–ª—É–≥–∞
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${client?.email}
üì¶ –£—Å–ª—É–≥–∞: ${service.name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price} ‚ÇΩ/–¥–µ–Ω—å
üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance?.amount || 0} ‚ÇΩ
      `;

      await sendTelegramMessage(message);
    }

    return NextResponse.json(service);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}
