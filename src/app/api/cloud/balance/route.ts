import { NextResponse } from 'next/server';
import { pool } from '@/lib/db';
import { cookies } from 'next/headers';
import { verifyAuthServer } from '@/lib/auth.server';
import { sendTelegramMessage } from '@/lib/telegram';

export async function GET() {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const user = await verifyAuthServer(token);
    if (!user) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const result = await pool.query(
      `SELECT amount FROM cloud_balance WHERE user_id = $1`,
      [user.id]
    );

    return NextResponse.json({ balance: result.rows[0]?.amount || 0 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function POST(req: Request) {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('token')?.value;

    if (!token) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const user = await verifyAuthServer(token);
    if (!user) {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const { amount, method } = await req.json();

    if (!amount || amount <= 0) {
      return new NextResponse('Invalid amount', { status: 400 });
    }

    // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const operationResult = await pool.query(
      `INSERT INTO cloud_operations
       (user_id, type, amount, method, status, created_at)
       VALUES ($1, 'deposit', $2, $3, $4, NOW())
       RETURNING *`,
      [user.id, amount, method, method === 'invoice' ? 'pending' : 'completed']
    );

    const operation = operationResult.rows[0];

    // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π, —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    if (method === 'online') {
      await pool.query(
        `INSERT INTO cloud_balance (user_id, amount)
         VALUES ($1, $2)
         ON CONFLICT (user_id)
         DO UPDATE SET amount = cloud_balance.amount + $2`,
        [user.id, amount]
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É
      const message = `
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}
üíµ –°—É–º–º–∞: ${amount} ‚ÇΩ
üîÑ –ú–µ—Ç–æ–¥: –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
      `;

      await sendTelegramMessage(message);
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—Ä–æ—Å–µ —Å—á–µ—Ç–∞
      const message = `
üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}
üíµ –°—É–º–º–∞: ${amount} ‚ÇΩ
      `;

      await sendTelegramMessage(message);
    }

    return NextResponse.json(operation);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
