import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { sendTelegramMessage } from '@/lib/telegram';
import { sendEmail } from '@/lib/mail';

export async function POST() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏
    const activeServices = await db.query(
      `SELECT cs.*, u.email, cb.amount::numeric as balance, u.id as user_id
       FROM cloud_services cs
       JOIN users u ON cs.user_id = u.id
       JOIN cloud_balance cb ON cs.user_id = cb.user_id
       WHERE cs.status = 'active'
       ORDER BY u.id, cs.price DESC`
    );

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userServices = activeServices.rows.reduce((acc, service) => {
      if (!acc[service.user_id]) {
        acc[service.user_id] = {
          services: [],
          balance: parseFloat(service.balance),
          email: service.email,
        };
      }
      acc[service.user_id].services.push({
        ...service,
        price: parseFloat(service.price),
      });
      return acc;
    }, {});

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const userId in userServices) {
      const { services, balance, email } = userServices[userId];
      let currentBalance = balance;
      let totalCharge = 0;

      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥ –¥–ª—è ${email}:`, {
        initialBalance: currentBalance,
        servicesCount: services.length,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const service of services) {
        try {
          if (currentBalance < service.price) {
            console.log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${service.name}:`, {
              currentBalance,
              requiredPrice: service.price,
            });

            // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ª—É–≥—É
            await db.query(
              'UPDATE cloud_services SET status = $1 WHERE id = $2',
              ['suspended', service.id]
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await sendEmail({
              to: email,
              subject: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç BivekiGroup',
              text: `–£—Å–ª—É–≥–∞ ${service.name} –±—ã–ª–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞`,
              from: `"Biveki Group" <${process.env.SMTP_USER}>`,
              html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                  <h2 style="color: #333;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Å–ª—É–≥–∏</h2>
                  <p>–£–≤–µ–¥–æ–º–ª—è–µ–º –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ –æ–±–ª–∞—á–Ω–∞—è —É—Å–ª—É–≥–∞ –±—ã–ª–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</p>
                  <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
                    <p style="margin: 5px 0;"><strong>–£—Å–ª—É–≥–∞:</strong> ${service.name}</p>
                    <p style="margin: 5px 0;"><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</p>
                  </div>
                  <p>–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —É—Å–ª—É–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ <a href="${process.env.NEXT_PUBLIC_APP_URL}/dashboard/cloud" style="color: #007bff;">–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>.</p>
                  <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
                  <p style="color: #666; font-size: 12px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
                </div>
              `,
            });

            await sendTelegramMessage(
              `‚ö†Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±–ª–∞—á–Ω–∞—è —É—Å–ª—É–≥–∞\nüë§ –ö–ª–∏–µ–Ω—Ç: ${email}\nüì¶ –£—Å–ª—É–≥–∞: ${service.name}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price} ‚ÇΩ/–¥–µ–Ω—å\nüí≥ –ë–∞–ª–∞–Ω—Å: ${currentBalance} ‚ÇΩ`
            );
          } else {
            currentBalance -= service.price;
            totalCharge += service.price;

            await sendTelegramMessage(
              `üí∞ –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n–ö–ª–∏–µ–Ω—Ç: ${email}\n–£—Å–ª—É–≥–∞: ${service.name}\n–°—É–º–º–∞: ${service.price} ‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫: ${currentBalance} ‚ÇΩ`
            );
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ª—É–≥–∏ ${service.name}:`, error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–π —É—Å–ª—É–≥–∏
          continue;
        }
      }

      // –ï—Å–ª–∏ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (totalCharge > 0) {
        const newBalance = balance - totalCharge;
        await db.query(
          'UPDATE cloud_balance SET amount = $1 WHERE user_id = $2',
          [newBalance, userId]
        );

        console.log(`–ò—Ç–æ–≥–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${email}:`, {
          totalCharge,
          newBalance,
        });
      }
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤' },
      { status: 500 }
    );
  }
}
