'use client';

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import { useUser } from '../../user-provider';
import { sendTelegramMessage } from '@/lib/telegram';

interface DepositDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function DepositDialog({ open, onOpenChange }: DepositDialogProps) {
  const [amount, setAmount] = useState('');
  const [inn, setInn] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState<'card' | 'invoice' | null>(
    null
  );
  const { toast } = useToast();
  const { user } = useUser();

  const handleAmountChange = (value: string) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const numericValue = value.replace(/[^0-9]/g, '');
    setAmount(numericValue);
  };

  const handleInnChange = (value: string) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∞–∫—Å–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤
    const numericValue = value.replace(/[^0-9]/g, '').slice(0, 12);
    setInn(numericValue);
  };

  const validateInn = (inn: string) => {
    // –ò–ù–ù –º–æ–∂–µ—Ç –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä
    return inn.length === 10 || inn.length === 12;
  };

  const handleCardPayment = async () => {
    const numericAmount = parseInt(amount);

    if (numericAmount < 100) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ',
        variant: 'destructive',
      });
      return;
    }

    setIsLoading(true);
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API –ê–ª—å—Ñ–∞ –ë–∞–Ω–∫–∞
      const response = await fetch('/api/payments/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          amount: numericAmount,
          type: 'card',
          email: user?.email,
          successUrl: window.location.origin + '/dashboard/cloud',
          failUrl: window.location.origin + '/dashboard/cloud',
        }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
      }

      const data = await response.json();
      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
      window.location.href = data.paymentUrl;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleInvoicePayment = async () => {
    const numericAmount = parseInt(amount);

    if (numericAmount < 100) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ',
        variant: 'destructive',
      });
      return;
    }

    if (!validateInn(inn)) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)',
        variant: 'destructive',
      });
      return;
    }

    setIsLoading(true);
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      await sendTelegramMessage(
        `üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞\n–ö–ª–∏–µ–Ω—Ç: ${user?.email}\n–ò–ù–ù: ${inn}\n–°—É–º–º–∞: ${numericAmount} ‚ÇΩ`
      );

      toast({
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: '–°—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
      });

      setIsOpen(false);
      setAmount('');
      setInn('');
      setPaymentMethod(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</DialogTitle>
        </DialogHeader>
        <div className="space-y-4 mt-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (‚ÇΩ)</label>
            <Input
              type="text"
              value={amount}
              onChange={(e) => handleAmountChange(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
            />
            <p className="text-xs text-muted-foreground">
              –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ
            </p>
          </div>

          {!paymentMethod ? (
            <div className="space-y-2">
              <Button
                className="w-full"
                onClick={() => setPaymentMethod('card')}
                disabled={isLoading || !amount || parseInt(amount) < 100}
              >
                –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
              </Button>
              <Button
                variant="outline"
                className="w-full"
                onClick={() => setPaymentMethod('invoice')}
                disabled={isLoading || !amount || parseInt(amount) < 100}
              >
                –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç
              </Button>
            </div>
          ) : paymentMethod === 'invoice' ? (
            <div className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">–ò–ù–ù</label>
                <Input
                  type="text"
                  value={inn}
                  onChange={(e) => handleInnChange(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                />
                <p className="text-xs text-muted-foreground">
                  –î–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (10 –∏–ª–∏ 12
                  —Ü–∏—Ñ—Ä)
                </p>
              </div>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => setPaymentMethod(null)}
                >
                  –ù–∞–∑–∞–¥
                </Button>
                <Button
                  className="w-full"
                  onClick={handleInvoicePayment}
                  disabled={isLoading || !validateInn(inn)}
                >
                  –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç
                </Button>
              </div>
            </div>
          ) : (
            <div className="flex gap-2">
              <Button
                variant="outline"
                className="w-full"
                onClick={() => setPaymentMethod(null)}
              >
                –ù–∞–∑–∞–¥
              </Button>
              <Button
                className="w-full"
                onClick={handleCardPayment}
                disabled={isLoading}
              >
                –û–ø–ª–∞—Ç–∏—Ç—å
              </Button>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
