generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  role            String           @default("client") @db.VarChar(10)
  cloudBalance    CloudBalance?
  cloudOperations CloudOperation[]
  cloudServices   CloudService[]
  notifications   Notification[]
  websites        websites[]

  @@map("users")
}

model CloudBalance {
  user_id    Int       @id
  amount     Decimal   @default(0) @db.Decimal(10, 2)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  user       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("cloud_balance")
}

model CloudService {
  id          Int       @id @default(autoincrement())
  user_id     Int
  name        String    @db.VarChar(255)
  type        String    @db.VarChar(50)
  description String?
  price       Decimal   @db.Decimal(10, 2)
  status      String    @db.VarChar(20)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  user        User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_cloud_services_status")
  @@index([user_id], map: "idx_cloud_services_user_id")
  @@map("cloud_services")
}

model CloudOperation {
  id         Int       @id @default(autoincrement())
  user_id    Int
  type       String    @db.VarChar(20)
  amount     Decimal   @db.Decimal(10, 2)
  method     String?   @db.VarChar(20)
  status     String    @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  user       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_cloud_operations_status")
  @@index([user_id], map: "idx_cloud_operations_user_id")
  @@map("cloud_operations")
}

model Notification {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  user_id     Int?
  user        User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id])
  @@map("notifications")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model websites {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  domain       String         @unique @db.VarChar(255)
  client_id    Int
  status       website_status @default(development)
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  last_updated DateTime       @default(now()) @db.Timestamptz(6)
  users        User           @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([client_id])
  @@index([created_at(sort: Desc)])
  @@index([status])
}

enum website_status {
  development
  active
  suspended
}
